var $ = require('jquery');
var q = require('q');

/**
 * The set of loaded modules from the server and their module export.
 * @type {{}}
 */
var loadedModules = {};

/**
 * The set of status's for the module loader.
 * @type {{}}
 */
var moduleStatus = {};


/**
 * The loading state.  The module has been called externally but has not be loaded.
 * @type {String}
 */
var MODULE_LOADING = 'loading';
/**
 * The module has been loaded externally.
 * @type {String}
 */
var MODULE_LOADED = 'loaded';

/**
 * The module failed to load
 * @type {String}
 */
var MODULE_FAILED = 'failed';

/**
 * Loads the module from cache.
 * @param {String} name
 * @returns {Q.promise}
 */
function loadCachedModule(name) {
    var deferred = q.defer();

    setTimeout(function() {
        deferred.resolve(loadedModules[name]);
    }, 17);

    return deferred.promise;
}

/**
 * Simple module loading from the server.
 * @param {String} name
 * @param {String} url
 * @returns {Q.promise}
 */
function loadExternalModule(name, url) {
    var deferred = q.defer();

    moduleStatus[name] = MODULE_LOADING;
    $.getScript(url).done(function(response) {
        loadedModules[name] = require(name);
        moduleStatus[name] = MODULE_LOADED;
        deferred.resolve(loadedModules[name]);
    }).fail(function() {
            moduleStatus[name] = MODULE_FAILED;
            deferred.reject();
        });

    return deferred.promise;
}

/**
 * Loads a module that is currently being requested.
 * @param {String} name
 * @returns {Q.promise}
 */
function loadInflightModule(name) {
    var deferred = q.defer();

    (function wait() {
        setTimeout(function() {

            // Waits until loaded.
            if (moduleStatus[name] === MODULE_LOADING) {
                wait();
            } else {

                if (moduleStatus[name] === MODULE_LOADED) {
                    deferred.resolve(loadedModules[name]);
                } else if (moduleStatus[name] === MODULE_FAILED) {
                    deferred.reject(name);
                }
            }
        }, 17);
    })();

    return deferred.promise;
}

/**
 * Determines if the module needs to be loaded from cache or from the server.
 * @param {String} name
 * @param {String} url
 * @returns {Q.promise}
 */
function loadModule(name, url) {

    // The loaded module
    if (moduleStatus[name] === MODULE_LOADED) {
        return loadCachedModule(name);
    }

    // The loading module, must wait.
    else if (moduleStatus[name] === MODULE_LOADING) {
        return loadInflightModule(name);
    }

    // Call external loader.
    else if (moduleStatus[name] === undefined) {
        return loadExternalModule(name, url);
    }
}

/**
 * The script loader will load scripts based off a base url.
 * @param {{
 *     [baseUrl]: String
 * }} configuration
 *
 * @constructor
 */
var ScriptLoader = function(configuration) {
    var settings = $.extend({}, configuration);
    this.baseUrl = settings.baseUrl || './dist/';
}

/**
 * @type {{loadModule: Function}}
 */
ScriptLoader.prototype = {
    /**
     * Loads the module from the server or cache.
     * @param {String} name
     * @returns {Q.promise}
     */
    loadModule: function(name) {
        return loadModule(name, this.baseUrl + name + '.js');
    }
}


module.exports = ScriptLoader;
